package com.example.pebble12;

import java.util.HashMap;
import java.util.UUID;

import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.util.Log;

import com.getpebble.android.kit.PebbleKit;
import com.getpebble.android.kit.PebbleKit.PebbleAckReceiver;
import com.getpebble.android.kit.PebbleKit.PebbleNackReceiver;
import com.getpebble.android.kit.util.PebbleDictionary;

/**
 * A helper class that deals with pebble communications
 * @author Kevin
 *
 */
public class Pebble {
	
	static Context ctx;
	public final static UUID PEBBLE_APP_UUID = UUID.fromString("3a7152cd-b1f6-4d5d-a93b-be3dce12116d");
	static int COUNTER = 0; //Used to give unique ID's to pebble events

	HashMap<Integer,PebbleDictionary> pending_events = new HashMap<Integer,PebbleDictionary>();

	
	public Pebble(final Context ctx) {
		this.ctx = ctx;
		
		
		if (PebbleKit.areAppMessagesSupported(ctx)) {
			  Log.i(MainActivity.TAG, "App Message is supported!");
			}
			else {
			  Log.i(MainActivity.TAG, "App Message is not supported, how did you even download this app?");
			}
		
		// Get when pebble connects and disconnects
        PebbleKit.registerPebbleConnectedReceiver(ctx, new BroadcastReceiver() {
        	@Override
        	  public void onReceive(Context context, Intent intent) {
        	    Log.i(MainActivity.TAG, "Pebble connected!");
        	    MainActivity.notifyPebbleOfChanges(); //Do a new change, we don't know when the last time we were connected
        	  }
        	});

        PebbleKit.registerPebbleDisconnectedReceiver(ctx, new BroadcastReceiver() {
        	  @Override
        	  public void onReceive(Context context, Intent intent) {
        	    Log.i(MainActivity.TAG, "Pebble disconnected!");
        	    MainActivity.timer.cancel(); //Stop the timer, until we reconnect
        	  }
        	});
        
        
        //Recieve ACK's and Nacks from the pebble for the data we send to it
        PebbleKit.registerReceivedAckHandler(ctx, new PebbleAckReceiver(PEBBLE_APP_UUID) {
        	  @Override
        	  public void receiveAck(Context context, int transactionId) {
        	    Log.i(MainActivity.TAG, "Received ack for transaction " + transactionId);
        	    
        	    //Once it's been sent successfully, remove it from the hashmap
        	    PebbleDictionary reData = pending_events.remove(transactionId);
        	  }
        	});

        PebbleKit.registerReceivedNackHandler(ctx, new PebbleNackReceiver(PEBBLE_APP_UUID) {
        	  @Override
        	  public void receiveNack(Context context, int transactionId) {
        	    Log.i(MainActivity.TAG, "Received nack for transaction " + transactionId);
        	    
        	    //Resubmit data that was Nacked
        	    PebbleDictionary reData = pending_events.get(transactionId);
        	    if(reData != null) {
        	    	PebbleKit.sendDataToPebbleWithTransactionId(ctx, PEBBLE_APP_UUID, reData,COUNTER);
        	    }
        	    
        	  }
        	});
        	
        //For receiving data from the pebble(though this shouldn't happen)
        PebbleKit.registerReceivedDataHandler(ctx, new PebbleKit.PebbleDataReceiver(PEBBLE_APP_UUID) {
        	    @Override
        	    public void receiveData(final Context context, final int transactionId, final PebbleDictionary data) {
        	      Log.i(MainActivity.TAG, "Received value=" + data.getUnsignedInteger(0) + " for key: 0");

        	      //We assume the watchface was opened up, so clear all data
        	      PebbleKit.sendAckToPebble(Pebble.ctx, transactionId);
        	      pending_events.clear();
        	      MainActivity.events.clear();
        	      MainActivity.getEventsNext24Hours();
        	    }
        	});
	}
	/**
	 * Sends an event to the app, and tells whether it's been added or removed
	 * @param e
	 * @param added
	 */ 
	public void sendEvent(Event e, boolean added) {
		byte b_false = 0;
		byte b_true = 1;
		PebbleDictionary data = new PebbleDictionary();
//		data.addInt32(0,e.hashCode); //The batch number of this transaction
		data.addInt8(1, added ? b_true : b_false); //I have no idea what I'm doing
		data.addInt32(2, e.startDay);
		data.addInt32(3,e.endDay);
		data.addInt32(4,e.startTime);
		data.addInt32(5,e.endTime);
		data.addString(6, e.title);
		pending_events.put(COUNTER, data);
		Log.i(MainActivity.TAG, "start time:" + e.startTime);
		Log.i(MainActivity.TAG, "start day:" + e.startDay);

		pending_events.put(COUNTER, data);
		PebbleKit.sendDataToPebbleWithTransactionId(ctx, PEBBLE_APP_UUID, data,COUNTER); //counter is also transaction ID
		COUNTER++;
		
	}

}
